// Package awsmerge contains logic to merge multiple AWS config files
// together. In Granted this is used to power the Profile Registry feature.
package awsmerge

import (
	"bytes"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"gopkg.in/ini.v1"
)

func TestMerger_WithRegistry(t *testing.T) {

	type args struct {
		dst  string
		src  string
		opts RegistryOpts
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{
			name: "ok",
			args: args{
				opts: RegistryOpts{
					Name: "test",
				},
				src: `
[profile new]
key=value
key1=value2
`,
				dst: `
[profile existing]
key2=value2
key3=value3
`,
			},
			want: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile new]
key  = value
key1 = value2

[granted_registry_end test]
`,
		},

		{
			name: "preserves_comments",
			args: args{
				opts: RegistryOpts{
					Name: "test",
				},
				src: `
[profile new]
key=value
key1=value2
`,
				dst: `
# comment here
[profile existing]
# some comment here
key2=value2
key3=value3
`,
			},
			want: `
# comment here
[profile existing]
# some comment here
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile new]
key  = value
key1 = value2

[granted_registry_end test]
`,
		},

		{
			name: "duplicate_error",
			args: args{
				opts: RegistryOpts{
					Name: "test",
				},
				src: `
[profile existing]
key=value
key1=value2
`,
				dst: `
[profile existing]
key2=value2
key3=value3
`,
			},
			wantErr: true,
		},

		{
			name: "handle_duplicate",
			args: args{
				opts: RegistryOpts{
					Name:                    "test",
					PrefixDuplicateProfiles: true,
				},
				src: `
[profile existing]
key=value
key1=value2
`,
				dst: `
[profile existing]
key2=value2
key3=value3
`,
			},
			want: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

# profile name has been prefixed due to duplication
[profile test.existing]
key  = value
key1 = value2

[granted_registry_end test]
`,
		},

		{
			name: "prefix_all_profiles",
			args: args{
				opts: RegistryOpts{
					Name:              "test",
					PrefixAllProfiles: true,
				},
				src: `
[profile other]
key=value
key1=value2
`,
				dst: `
[profile existing]
key2=value2
key3=value3
`,
			},
			want: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile test.other]
key  = value
key1 = value2

[granted_registry_end test]
`,
		},

		{
			name: "existing_profile_registry_entries",
			args: args{
				opts: RegistryOpts{
					Name: "other",
				},
				src: `
[profile third]
example=value
key1=value2
`,
				dst: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile test.other]
key  = value
key1 = value2

[granted_registry_end test]
`,
			},
			want: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile test.other]
key  = value
key1 = value2

[granted_registry_end test]

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start other]

[profile third]
example = value
key1    = value2

[granted_registry_end other]
`,
		},

		{
			// test case where profile registry entries already exist in the profile file
			name: "merge_on_existing_profile_registry",
			args: args{
				opts: RegistryOpts{
					Name: "test",
				},
				src: `
[profile new]
example=value
key1=value2
`,
				dst: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile old]
key  = value
key1 = value2

[granted_registry_end test]
`,
			},
			want: `
[profile existing]
key2 = value2
key3 = value3

# Auto-generated by Granted (https://granted.dev). DO NOT EDIT.
# Manual edits to this section will be overwritten.
# To stop syncing and remove this section, run 'granted registry remove'.
[granted_registry_start test]

[profile new]
example = value
key1    = value2

[granted_registry_end test]
`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			src, err := ini.Load([]byte(tt.args.src))
			if err != nil {
				t.Fatal(err)
			}

			dst, err := ini.Load([]byte(tt.args.dst))
			if err != nil {
				t.Fatal(err)
			}

			m := Merger{}
			out, err := m.WithRegistry(src, dst, tt.args.opts)
			if (err != nil) != tt.wantErr {
				t.Fatalf("Merger.WithRegistry() error = %v, wantErr %v", err, tt.wantErr)
			}

			var got string

			if out != nil {
				var b bytes.Buffer

				_, err = out.WriteTo(&b)
				if err != nil {
					t.Fatal(err)
				}
				got = strings.TrimSpace(b.String())
			}

			want := strings.TrimSpace(tt.want)

			assert.Equal(t, want, got)
		})
	}
}
