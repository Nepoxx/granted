name: CI

on: [push]

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

        # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.19.2"
      - name: Build All Platforms
        run: make ci-cli-all-platforms
      # Upload the built binaries to use in later tests on each platform
      - uses: actions/upload-artifact@v3
        with:
          name: go-binaries-linux
          path: ./bin/linux/
      - uses: actions/upload-artifact@v3
        with:
          name: go-binaries-macos
          path: ./bin/macos/
      - uses: actions/upload-artifact@v3
        with:
          name: go-binaries-windows
          path: ./bin/windows/
      - name: Lint
        run: go vet ./...

      - name: Test
        run: go test ./...

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - name: Go Vet
        run: go vet ./...
      - name: Go Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout 5m
      - name: Shellcheck
        uses: ludeeus/action-shellcheck@master

  smoke-test:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11]
        shell: [bash, zsh, fish]
    env:
      TEST_ACCESS_KEY_ID: 1234578910abcdefghij
      TEST_ACCESS_KEY: 1234578910abcdefghijklmnopqrstuvwxyz1234
      TEST_REGION: ap-southeast-2
    steps:
      - uses: actions/checkout@v2
      - name: Download Binaries
        uses: actions/download-artifact@v3
        with:
          name: go-binaries-${{ runner.os }}
      - name: Move Binaries
        run: |
          chmod +x ./dassumego && mv ./dassumego /usr/local/bin/
          chmod +x ./dgranted && mv ./dgranted /usr/local/bin/
          chmod +x ./tbrowser && mv ./tbrowser /usr/local/bin/
          chmod +x ./tcreds && mv ./tcreds /usr/local/bin/
          chmod +x ./dassume && mv ./dassume /usr/local/bin/
          chmod +x ./dassume.fish && mv ./dassume.fish /usr/local/bin/
      - name: set default browser
        # configures granted to use the test browser binary
        run: dgranted browser set -b chrome -p /usr/local/bin/tbrowser
      - name: setup aws config files
        run: mkdir ~/.aws; touch ~/.aws/config; touch ~/.aws/credentials;
      - name: setup fake aws profile
        run: |
          cat << EOF >> ~/.aws/config
          [profile test]
          region = ${TEST_REGION}
          EOF
      - name: setup fake aws profile credentials
        run: |
          cat << EOF >> ~/.aws/credentials
          [test]
          aws_access_key_id=${TEST_ACCESS_KEY_ID}
          aws_secret_access_key=${TEST_ACCESS_KEY}
          EOF
      - name: Install Shells
        run: |
          if [ "${{ matrix.shell }}" == "zsh" ]; then
            sudo apt-get update && sudo apt-get install zsh
          elif [ "${{ matrix.shell }}" == "fish" ]; then
            sudo apt-add-repository ppa:fish-shell/release-3 && sudo apt update && sudo apt install fish
          fi
      - name: Configure Shell
        run: SHELL=/bin/${{ matrix.shell }} dassume -auto-configure-shell
        shell: ${{ matrix.shell }} {0}
      - name: Assume Role
        run: |
          SHELL=/bin/${{ matrix.shell }} dassume test
          tcreds -aws-access-key-id $TEST_ACCESS_KEY_ID -aws-secret-key $TEST_ACCESS_KEY -aws-region $TEST_REGION
        shell: ${{ matrix.shell }} {0}
